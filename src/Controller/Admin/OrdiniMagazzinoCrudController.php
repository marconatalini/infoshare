<?php

namespace App\Controller\Admin;

use App\Entity\OrdiniMagazzino;
use App\Entity\User;
use App\Form\CustomerType;
use App\Repository\OrdiniMagazzinoRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Filter\BooleanFilter;
use EasyCorp\Bundle\EasyAdminBundle\Filter\NullFilter;
use Symfony\Component\Form\FormBuilderInterface;

class OrdiniMagazzinoCrudController extends AbstractCrudController
{
    private $memoryCustomer;

    public function __construct(ManagerRegistry $managerRegistry)
    {
        $this->managerRegistry = $managerRegistry;
        $em = $this->managerRegistry->getRepository(OrdiniMagazzino::class);
        $choices = $em->getAllCustomer();
        $this->memoryCustomer = array_combine($choices, $choices);
    }


    public static function getEntityFqcn(): string
    {
        return OrdiniMagazzino::class;
    }

    public function configureFilters(Filters $filters): Filters
    {
        return $filters
            ->add(NullFilter::new('readyAt','Pronti')->setChoiceLabels('NO','SI'))
            ;
    }


    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityPermission('ROLE_USER')
            ->setFormOptions([
                'attr' => ['data-controller' => 'ordine']
            ],[
                'attr' => ['data-controller' => 'ordine']
            ])
            ;
    }


    public function configureFields(string $pageName): iterable
    {

        yield DateField::new('createAt')->onlyOnIndex();
        yield ChoiceField::new('customer')->autocomplete()->setFormType(CustomerType::class)
            ->setChoices($this->memoryCustomer)->setFormTypeOptions([
            'placeholder' => 'Scegli su...',
            'attr' => ['data-ordine-target' => 'customer'],
            ]);
        yield TextField::new('orderlist');
        yield TextField::new('user')->onlyOnIndex();
        yield TextField::new('stockUser')->onlyOnIndex();
        yield AssociationField::new('stockUser')->setQueryBuilder(function (QueryBuilder $qb) {
            return $qb->select('u')->from(User::class, 'u')
                ->where("u.roles LIKE :role")->setParameter('role', '%MAGAZZINO%');
        })->hideOnIndex();
        yield DateField::new('deliveryAt');
        yield DateField::new('readyAt');
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        /** @var OrdiniMagazzino $entityInstance */
        $entityInstance->setUser($this->getUser());

        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }


}
